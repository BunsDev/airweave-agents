---
description: Use if you're writing a new source connection.
globs: 
alwaysApply: false
---

# Airweave Source Integration Generator

You are an expert Python developer tasked with creating a new source integration for Airweave. Airweave is an open-source platform that makes any app searchable for agents by syncing data from various sources into vector and graph databases. 

#### Real Examples

- **Slack**: Multi-resource API with channels, users, and messages [slack.py](mdc:backend/app/platform/sources/slack.py) [slack.py](mdc:backend/app/platform/entities/slack.py)
- **Stripe**: Complex pagination with many resource types [stripe.py](mdc:backend/app/platform/sources/stripe.py) [stripe.py](mdc:backend/app/platform/entities/stripe.py)
- **Asana**: Hierarchical data with file handling capabilities [asana.py](mdc:backend/app/platform/sources/asana.py) [asana.py](mdc:backend/app/platform/entities/asana.py)

## Your Task

Create a complete source integration for {your source} in the following steps

1. Extract necessary information from the docs.
2. Define entity schemas
3. Implement source connector
4. Run, test and debug with the `Local Sync Test` MCP Tool server
5. Conclude

Do not edit code other than the files you were prompted to create or edit.


## 1. Extract necessary information

1. Find out which authentication type is best for this type of source integration, if OAuth2, which type? You can choose between: `oauth2`, `oauth2_with_refresh` and `oauth2_with_refresh_rotating`?
2. Find out which entities are most important. List them, along with their (optional and primary key) attributes
3. Find out the relations between these entities. List them along with named foreign key relations.

## 2. Define Entity Schemas

For each data type from your API, create a corresponding entity schema in `backend/app/platform/entities/your_service.py`:

It extends from [_base.py](mdc:backend/app/platform/entities/_base.py) the BaseEntity, ChunkyEntity or FileEntity.

```python
class Breadcrumb(BaseModel):
    """Breadcrumb for tracking ancestry."""

    entity_id: str
    name: str
    type: str


class BaseEntity(BaseModel):
    """Base entity schema."""

    # Set in source connector
    entity_id: str = Field(
        ..., description="ID of the entity this entity represents in the source."
    )
    breadcrumbs: list[Breadcrumb] = Field(
        default_factory=list, description="List of breadcrumbs for this entity."
    )
    ...

class ChunkEntity(BaseEntity):
    """Base class for entities that are storable and embeddable chunks of data."""

class FileEntity(BaseEntity):
    """Base schema for file entities."""

    # Set in source connector
    file_id: str = Field(..., description="ID of the file in the source system")
    name: str = Field(..., description="Name of the file")
    mime_type: Optional[str] = Field(None, description="MIME type of the file")
    size: Optional[int] = Field(None, description="Size of the file in bytes")
    download_url: str = Field(..., description="URL to download the file")

```


**What you will need to implement, based on the API object described in docs:**

```python
class YourServiceEntity(ChunkEntity):
    """Schema for your service entity."""
    
    name: Optional[str] = None                  # Entity name
    some_count: int                             # Some count in entity
    created_at: datetime                        # created_at field
```

The `entity_id` usually is just the id of the item in the API. If not, find a primary key in the object.


## 3. Implement Source Connector

Create your source implementation in `backend/app/platform/sources/your_service.py`:

```python
@source("Display Name", "your_service", AuthType.oauth2)
class YourServiceSource(BaseSource):
    """Your service source implementation."""
    
    BASE_URL = "https://api.yourservice.com/v1"
    
    @classmethod
    async def create(cls, access_token: str) -> "YourServiceSource":
        """Create a new source instance with authentication."""
        instance = cls()
        instance.access_token = access_token
        return instance
    @tenacity.retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
    async def _get_with_auth(self, client: httpx.AsyncClient, url: str, params: Optional[dict] = None) -> dict:
        """Make authenticated API request."""
        headers = {"Authorization": f"Bearer {self.access_token}"}
        response = await client.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    
    async def _generate_resource_entities(self, client: httpx.AsyncClient) -> AsyncGenerator[ChunkEntity, None]:
        """Generate entities from a specific resource type."""
        url = f"{self.BASE_URL}/resources"
        
        # Handle pagination (if needed)
        next_cursor = None
        while True:
            params = {"limit": 100}
            if next_cursor:
                params["cursor"] = next_cursor
                
            response = await self._get_with_auth(client, url, params)
            
            for item in response.get("items", []):
                yield YourServiceEntity(
                    entity_id=item["id"],
                    name=item.get("name"),
                    created_at=datetime.fromisoformat(item.get("created", "")),
                    content=item.get("description", ""),
                )
            
            # Check if there are more pages
            next_cursor = response.get("next_cursor")
            if not next_cursor:
                break
    
    async def generate_entities(self) -> AsyncGenerator[ChunkEntity, None]:
        """Main entry point to generate all entities."""
        async with httpx.AsyncClient() as client:
            # Generate entities for each resource type
            async for entity in self._generate_resource_entities(client):
                yield entity
            
            # Add additional resource generators as needed
            # async for entity in self._generate_other_resource_entities(client):
            #     yield entity
```

### Source Writing Best Practices

- **Error Handling and Retries**: Use Async Tenacity for robust retry mechanisms
  ```python
  async def _get_with_auth(self, client: httpx.AsyncClient, url: str) -> Dict:
      """Make authenticated GET request to API."""
      retryer = AsyncRetrying(
          retry=retry_if_exception_type(httpx.HTTPError),
          wait=wait_exponential(multiplier=1, min=2, max=10),
          stop=stop_after_attempt(3),
      )
      
      async for attempt in retryer:
          with attempt:
              try:
                  response = await client.get(
                      url,
                      headers={"Authorization": f"Bearer {self.access_token}"},
                  )
                  response.raise_for_status()
                  return response.json()
              except Exception as e:
                  logger.error(f"Error calling endpoint: {str(e)}")
                  raise
  ```

- **Modular Entity Generation**: Create separate methods for different entity types
  ```python
  async def generate_entities(self) -> AsyncGenerator[ChunkEntity, None]:
      """Main entry point to generate all entities."""
      async with httpx.AsyncClient() as client:
          # First generate parent entities
          async for workspace_entity in self._generate_workspace_entities(client):
              yield workspace_entity
              
              # Then generate child entities with breadcrumbs
              async for project_entity in self._generate_project_entities(
                  client, 
                  {"gid": workspace_entity.entity_id}, 
                  workspace_breadcrumb
              ):
                  yield project_entity
  ```

- **Breadcrumb Management**: Build breadcrumb hierarchies for nested resources
  ```python
  # Create breadcrumb for the parent entity
  workspace_breadcrumb = Breadcrumb(
      entity_id=workspace_entity.entity_id,
      name=workspace_entity.name,
      type="workspace",
  )
  
  # Pass parent breadcrumbs to child entities
  project_breadcrumbs = [workspace_breadcrumb, project_breadcrumb]
  ```

- **File Handling**: Use dedicated streaming methods with proper error handling
  ```python
  async def _stream_file(self, client: httpx.AsyncClient, url: str) -> AsyncGenerator[bytes, None]:
      """Stream a file with authentication."""
      retryer = AsyncRetrying(
          retry=retry_if_exception_type(httpx.HTTPError),
          wait=wait_exponential(multiplier=1, min=2, max=10),
          stop=stop_after_attempt(3),
      )
      
      async for attempt in retryer:
          with attempt:
              try:
                  async with client.stream("GET", url, headers=headers) as response:
                      response.raise_for_status()
                      async for chunk in response.aiter_bytes():
                          yield chunk
              except Exception as e:
                  logger.error(f"Error streaming file: {str(e)}")
                  raise
  ```

- **File Processing**: Use the file manager to process file entities
  ```python
  file_entity = YourServiceFileEntity(
      source_name="your_service",
      entity_id=file_data["id"],
      file_id=file_data["id"],
      name=file_data.get("name"),
      mime_type=file_data.get("mime_type"),
      size=file_data.get("size"),
      download_url=file_data.get("download_url"),
  )
  
  # Stream the file and hand off the stream.
  file_stream = self._stream_file(client, file_entity.download_url)
  yield await handle_file_entity(file_entity, file_stream)
  ```

## 4. Run, test and debug with the `Local Sync Test` MCP Tool server

Once the source is set up, you must test the MCP server.

There are two tools
- Check Connection (arg: short_name)
- Run Sync (arg: short_name)

There are essentially three outcomes:

1. You test the connection and it returns that the user must still handle something. Pause the execution and prompt the user to fix it. If the problem is about the integrations yaml, check out [integrations-yaml.mdc](mdc:.cursor/rules/integrations-yaml.mdc). In case of OAuth2: look into the docs which scoped we need. Add the yaml instance. to `dev.integrations.yaml`. Then `docker-compose down && docker-compose up -d` as there is no hot reload for non-python files. If the problem is that there is no connection, ask the user to add one. Once done, retest the connection using mcp!

2. The connection works, and you try the sync, but it fails. You will receive a stacktrace from the problem. You must now fix it, and retry to sync, until it works.

3. The sync works! You can now create a branch, commit and push.



